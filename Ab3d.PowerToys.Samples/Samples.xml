<?xml version="1.0" encoding="utf-8" ?>
<Samples>
  <Sample Page="Other/IntroductionPage.xaml" IsTitle="True" Title="Introduction" Description=""/>
  <Sample Page="Other/BasicWpf3dObjectsTutorial.xaml" Title="Basic WPF 3D objects tutorial" Description=""/>

  <Sample Page="UseCases/UseCasesIntroPage.xaml" IsTitle="True" Title="Scene Editor"/>
  <Sample Page="SceneEditor/SceneEditor.xaml" Title="SceneEditor" Description=""/>

  <Sample Page="UseCases/UseCasesIntroPage.xaml" IsTitle="True" Title="Use Cases"/>
  <Sample Page="UseCases/Graph3D.xaml" Title="3D graph" Description="This sample shows some random data in a 3D graph. The X axis in the graph represents a time value. Z, Y axis and size of sphere represent some random data. The color of the sphere is based on its Y value.\nUser can see details with moving the mouse over the sphere. It is also possible to select individual spheres with clicking (using EventManager3D) or by selecting a rectangle and selecting many samples."/>
  <Sample Page="UseCases/Plot3DSample.xaml" Title="3D plot" Description="This sample shows how easy is to create great 3D Plots from some interesting functions.\nThe sample also shows how to create labels on y axis."/>
  <Sample Page="UseCases/DucksLakeDemo.xaml" Title="Ducks lake" Description="This sample demonstrates how to use Ab3d.PowerToys library for object selection and manipulation (move, rotate and scale).\n\!Note:\! in Ab3d.DXEngine samples this sample is rendered with nice shadows."/>
  <Sample Page="UseCases/CannonBallSimulation.xaml" Title="Cannon simulation" Description="Cannon Simulation shows how easy is to create a physical simulation in 3D with help from Ab3d.PowerToys classes."/>
  <Sample Page="UseCases/WindPowerGeneratorsSample.xaml" Title="Wind power generators" Description="Wind Power Generators sample shows how simple is to create a 3D simulation.\nUse can \!rotate the camera\! with \!right mouse button\!, \!move\! it with holding \!CTRL key and right mouse button\! or use \!mouse control panel\!.\nIt is possible to \!drag the wind generators\! around the hill.\nIt is also possible to change the wind speed which will cause the blades to rotate."/>
  <Sample Page="UseCases/EarthView.xaml" Title="3D Earth view" Description="This sample shows how to use height map and satellite images data and create 3D Earth explored with HeightMapVisual3D. The sample also shows how to create a height map from grayscale image.\nImages source: http://earthobservatory.nasa.gov/Features/BlueMarble/BlueMarble_monthlies.php"/>
  <Sample Page="UseCases/DistanceMeasurement.xaml" Title="Distance measurement" Description=""/>
  <Sample Page="UseCases/ArrowsSample.xaml" Title="Arrows sample" Description="Arrow sample shows how to use \!ArrowVisual3D\! objects in an interesting simulation. The simulation animates a golden sphere in 3D space. The arrows are positioned in the direction of the sphere, the color of the arrows indicate the distance to the sphere.\n\nTo see the same example but with \!millions (!!!) of animated arrows\! see the Ab3d.DXEngine samples project (required a powerful GPU)."/>
  <Sample Page="UseCases/MultipleSceneViewSample.xaml" Title="Multiple scene views" Description=""/>
  <Sample Page="UseCases/ObjectSelectionSample.xaml" Title="Object selection" Description=""/>
  <Sample Page="UseCases/WireframeSelection.xaml" Title="Wireframe selection" Description=""/>
  <Sample Page="UseCases/DrawOnTextureSample.xaml" Title="Draw on texture" Description="This sample shows how to draw on the texture"/>
  <Sample Page="UseCases/BillboardsSample.xaml" Title="Billboards sample" Description=""/>
  <Sample Page="UseCases/ModelingWithBooleanOperations.xaml" Title="Modeling with subtraction" Description=""/>
  <Sample Page="UseCases/Interactive3DControlsSample.xaml" Title="Interactive 3D controls" Description="This sample shows how to create interactive 3D WPF controls with Viewport2DVisual3D.\n\bImportant:\b interactive controls do not work when Viewport2DVisual3D is rendered with Ab3d.DXEngine. To use Viewport2DVisual3D in Ab3d.DXEngine create a new Viewport3D with only Viewport2DVisual3D and put it on top of DXViewportView control."/>
  <Sample Page="UseCases/TemplatePage.xaml" Title="Standard XAML template" Description=""/>

  <Sample Page="Cameras/CamerasIntroPage.xaml" IsTitle="True" Title="Cameras"/>
  <Sample Page="Cameras/CameraTypesSample.xaml" Title="Camera types" Description=""/>
  <Sample Page="Cameras/CameraOrientation.xaml" Title="Camera orientation" Description="This sample shows how to rotate the camera with \!Heading, Attitude and Bank\! properties."/>
  <Sample Page="Cameras/CamerasPropertiesSample.xaml" Title="Cameras properties" Description="Cameras sample show the main Ab3d Cameras in action.\nAll three cameras (\!TargetPositionCamera, ThirdPersonCamera and FirstPersonCamera\!)are bound to the same sliders so the difference between them can be easily seen. With pressing arrow keys the person is moved around - this will also make the FirstPersonCamera and ThirdPersonCamera move around."/>
  <Sample Page="Cameras/CameraMethods.xaml" Title="Camera methods" Description="This sample shows many of the methods that are available on cameras from Ab3d.PowerToys library."/>
  <Sample Page="Cameras/CameraAnimationSample.xaml" Title="Camera animation" Description="Camera Animation sample show how easy is to animate the camera to rotate around the scene.\n\nThe animation is created with using \!StartRotation\! method. Advantage of using StartRotation method over using Storyboard animation of Heading or Attitude properties is that StartRotation does not lock the Heading and Attitude properties. The StartRotation also works very good with CameraControlPanel and MouseCameraController - while the camera is rotating it is possible to manually \!change the camera with the mouse\! or with the buttons on CameraControlPanel."/>
  <Sample Page="Cameras/LimitedCameraMovementSample.xaml" Title="Limited camera movement" Description="This sample shows how to use \!PreviewCameraChanged event\! on cameras to \!limit the movement\! of the camera."/>
  <Sample Page="Cameras/CameraTypeSample.xaml" Title="Orthographic camera" Description="The sample shows how to change the default PerspectiveCamera to \!OrthographicCamera\! with setting the \!CameraType\! property.\n\nNote that when using the OrthographicCamera, zooming in and out with mouse or CameraControlPanel changes the CameraWidth instead of Distance."/>
  <Sample Page="Cameras/FirstPersonCameraSample.xaml" Title="FirstPersonCamera" Description=""/>
  <Sample Page="Cameras/FreeCameraSample.xaml" Title="FreeCamera sample" Description="\!FreeCamera\! is a special camera that is not defined by heading, attitude and bank angle. Instead the camera is defined by \!CameraPosition, TargetPosition\! and \!UpDirection\!. This makes the camera more flexible because it can be rotated around any axis.\n\nBecause FreeCamera rotation is not bounded to Y axis, the user can rotate the camera more freely. But this can have a negative effect on usability because the user can quickly become disoriented. But some experienced users find this additional freedom beneficial.\n\nAnyway, the FreeCamera also has a \!RotationUpAxis\! property that can be set to a Vector3D that lock the rotation around the specified axis. When RotationUpAxis is set to (0,1,0), this can effectively transform a FreeCamera to a camera that is very similar to the TargetPositionCamera. What is more, it is possible to define any vector as rotation axis. So you can also lock rotation around X, Z or any other axis."/>
  <Sample Page="Cameras/OffCenterCameraSample.xaml" Title="Off-center rendering" Description="This sample shows how to render the scene off-center and still preserve the desired camera rotation behaviour"/>
  <Sample Page="Cameras/Point3DTo2DSample.xaml" Title="Camera 3D to 2D" IsUpdated="True" UpdateInfo="Showing new Point3DTo2D method" Description="This sample shows how to use \!Point3DTo2D\! and \!Rect3DTo2D\! methods that are available on all Ab3d.Cameras.\nThe 2D bounding box is showing the 2D area of the 3D bounding box of the sphere. At first it looks like the bounding box is too bit, but when the Show 3D bounding box is clicked, it is seen that the show 2D area is correct."/>
  <Sample Page="Cameras/FitIntoViewSample.xaml" Title="Fit into view" Description="This sample shows how to use FitIntoView method."/>
  <Sample Page="Cameras/MouseRay3DSample.xaml" Title="Mouse 3D ray sample" Description="Mouse 3D ray sample shows how to create a 3D ray from the current camera and current mouse position. The sample also shows how to make a simple ray to plane hit testing. It can be also used as a base for hit testing with some other 3D object.\n\nNote that calculating hit position with ray and plane intersection is much faster than doing a standard 3D hit testing (there the mouse ray need to be tested with all 3D objects on the scene)."/>
  <Sample Page="Cameras/CustomUpAxisWithGlobalTransform.xaml" Title="Z Up axis with global transform" Description="This sample shows how to show objects that are defined in different coordinate system - for example where Z is pointing up.\nThis can be achieved by adding a Matrix transformation to root ModelVisual3D. After this all the data for the 3D objects can be defined in the changed coordinate system. In the example above the size of 3D boxes changes from (20, 20, 20) to (20, 20, 100) - showing that z coordinate is showing up. See XAML and code for more comments."/> 
  <Sample Page="Cameras/CustomUpAxisWithFreeCamera.xaml" Title="Z Up axis with FreeCamera" Description="Another way to show the scene with Z axis pointing up is to use FreeCameras and sets its RotationUpAxis to Z axis (0, 0, 1). This will lock rotation of the camera around Z axis and will result in similar behavior as with using TargetPositionCamera but with Z up axis instead of Y up axis." />

  <Sample Page="MouseCameraControllerSamples/MouseCameraControllerIntroPage.xaml" IsTitle="True" Title="MouseCameraController"/>
  <Sample Page="MouseCameraControllerSamples/MainMouseCameraControllerProperties.xaml" Title="Main properties" Description="This sample demonstrates how easy is to specify witch mouse button and keyboard modifier is used to rotate and move the camera with the MouseCameraController.\n\n"/>
  <Sample Page="MouseCameraControllerSamples/MouseCameraControllerOptions.xaml" Title="MouseCameraController options" Description=""/>
  <Sample Page="MouseCameraControllerSamples/RotateAroundCustomPoint.xaml" Title="Rotate around custom point" Description=""/>
  <Sample Page="MouseCameraControllerSamples/ZoomToCustomPoint.xaml" Title="Zoom to custom point" Description=""/>
  <Sample Page="MouseCameraControllerSamples/QuickZoomSample.xaml" Title="Quick zoom" Description=""/>
  <Sample Page="MouseCameraControllerSamples/CustomRotationMarker.xaml" Title="Custom rotation marker" Description=""/>
  <Sample Page="MouseCameraControllerSamples/CustomRotation3DMarker.xaml" Title="Custom rotation 3D marker" Description=""/>
  <Sample Page="MouseCameraControllerSamples/HorizontalCameraMovement.xaml" Title="Horizontal camera movement" Description="This samples shows that allowing users to freely move the camera can move the center of rotation off the horizontal plane and this can make the camera rotations unnatural. When the &quot;Show center of rotation axes&quot; CheckBox is checked, it reveals the center of rotation.\n\nWith setting the MoveOnlyHorizontally property on MouseCameraController to true, it is possible to prevent moving the center of rotation from the current horizontal plane (you can adjust the height of the horizontal plane with changing the TargetPosition or Offset before the camera movement)." />
  <Sample Page="MouseCameraControllerSamples/RotationDirectionSample.xaml" Title="Rotation direction" Description="By default MouseCameraControllers increase Camera's Heading when mouse is dragged from left to right. This is also a common behavior in 3D modeling applications.But this simple behavior may sometimes looks strange because sometimes during camera rotation the objects under the mouse move in different direction as the mouse.\n\nThis sample shows that with setting the IsRotationDirectionAdjusted property to true, the MouseCameraController tries to adjust the direction of rotation based on mouse position and current attitude angle. This sample demonstrates the usage of IsRotationDirectionAdjusted property and shows that correctly rotating camera around Y axis is not always simple as it might seem.\nThe colored axis shows the center of camera rotation. Green line is Y axis of rotation. Yellow wire cross show 3D position where mouse hit the scene or horizontal plane.\n\nFor example (we look at the scene from above - Attitude is -20):\n- if we start camera rotation with clicking at the bottom part of the window and start dragging the mouse from left to the right, we see that the Heading property of the camera is increasing. This is the most common situation.\n- if we start rotating at the upper part of the window, the Heading property is decreasing (though we are still moving the mouse from left to right). This looks correct, because the 3D objects below the mouse are moving in the same direction as the mouse.\n\nThis means that the direction of Heading change is not defined only by mouse move direction, but also by the current attitude angle and by the mouse position. At start of rotation, the position of mouse is used to do a quick hit test and check which object is hit by the mouse. The actual 3D hit position is then compared with the center of rotation. If hit position is after center of rotation, then we need to inverse the direction of rotation (when no object is hit, then intersection with horizontal plane is used as a hit point).\n\nAdjusting the rotation direction at first looked very promissing. But after some additional testing and consulting with some users, it become clear that it can lead to even more confusion - users that are used to simple rotation behavior from other applications, find this uncommon. Also if user dragging the mouse near the center of rotation, the direction of rotation can shift with slight mouse y positions changes. Therefore we decided that by default the IsRotationDirectionAdjusted is set to false."/>

  <Sample Page="OtherCameraControllers/CameraControllerIntroPage.xaml" IsTitle="True" Title="Other camera controllers"/>
  <Sample Page="OtherCameraControllers/ViewCubeCameraControllerSample.xaml" Title="ViewCubeCameraController" Description=""/>
  <Sample Page="OtherCameraControllers/FreeCameraViewCubeCameraControllerSample.xaml" Title="ViewCube with FreeCamera" IsNew="True" Description=""/>
  <Sample Page="OtherCameraControllers/MouseCameraControllerInfo.xaml" Title="MouseCameraControllerInfo" Description=""/>
  <Sample Page="OtherCameraControllers/CameraPanelsSample.xaml" Title="Camera panels sample" Description="This sample shows the \!CameraPreviewPanel\! and \!CameraAxisPanel\!. The sample also shows how to create custom CameraAxisPanel that show different coordinate system."/>
  <Sample Page="OtherCameraControllers/CameraControlPanel.xaml" Title="CameraControlPanel" />
  <Sample Page="OtherCameraControllers/CustomControlPanelSample.xaml" Title="Custom ControlPanel" Description="This sample demonstrates how to \!change the color\! of the buttons on \!CameraControlPanel\!. To do this we need to derive our own class from CameraControlPanel and override the GetUnSelectedBitmapForImageName and GetSelectedBitmapForImageName methods.\n\nThe original images that can be changed can be found in the Resources directory where the Ab3d.PowerToys is installed. The new images must have the same size as the original. If you need to create a control panel with completely different image, you will need to create a new control and manually change Heading and Attitude.\nIf you will customize the ControlPanel with changing the control template, you need to use the same names of the images as in the original template. This way the mouse events will be correctly subscribed to the images."/>
  <Sample Page="OtherCameraControllers/VerticalCameraControlPanelSample.xaml" Title="Vertical CameraController" Description="This sample shows how to arrange multiple CameraControlPanels to create a \!vertical CameraControlPanel\!."/>
  
  <Sample Page="Input/InputIntroPage.xaml" Title="Ab3d.PowerToys.Input" IsTitle="True" />
  <Sample Page="Input/Mouse3DSample.xaml" Title="3D mouse sample" />
  <Sample Page="Input/XInputCameraController.xaml" Title="Game controller sample" />
  
  <Sample Page="ReaderObj/ReaderObjIntroPage.xaml" IsTitle="True" Title="Read obj files"/>
  <Sample Page="ReaderObj/ObjModelVisual3D.xaml" Title="Using ObjModelVisual3D"/>
  <Sample Page="ReaderObj/ViewerObj.xaml" Title="Obj file viewer" Description="This sample shows how to import 3D models from obj files. Note that importing obj files needs to be done in two steps: first read ObjFileData with Ab3d.ReaderObj; than use Ab3d.ObjFileToWpfModel3DConverter to convert the ObjFileData into WPF's Model3D.\nThe sample is also showing how to import the obj file in the background with Tasks."/>
  <Sample Page="ReaderObj/ReadObjFromResources.xaml" Title="Read obj from resources" Description="This sample shows how to read obj file with mtl (material file) and textures from resources (or stream)" />

  <Sample Page="AssimpSamples/AssimpIntroPage.xaml" IsTitle="True" Title="Assimp importer / exporter"/>
  <Sample Page="AssimpSamples/AssimpWpfImporterSample.xaml" Title="Assimp model viewer" />
  <Sample Page="AssimpSamples/AssimpWpfExporterSample.xaml" Title="Assimp exporter" />
  <Sample Page="AssimpSamples/SkeletalAnimation.xaml" Title="Keyframe &amp; Skeletal animation" Description="This sample shows how to use AssimpWpfImporter and AssimpAnimationController to play keyframe and skeletal animations that are defined in 3D files."/>
  <Sample Page="AssimpSamples/AssimpModelVisual3D.xaml" Title="Using AssimpModelVisual3D"/>
  
  <Sample Page="Objects3D/Objects3DIntroPage.xaml" IsTitle="True" Title="Standard 3D Objects"/>
  <Sample Page="Objects3D/ObjectsCheatsheet.xaml" Title="3D objects cheat sheet" Description=""/>
  <Sample Page="Objects3D/AllVisualsSample.xaml" Title="All Visuals3D objects" Description="This sample shows how to create \!3D objects\! from classes defined in \!Ab3d.Visuals\!. The objects are defined in XAML and can be also previewed in Visual Studio designer.\nThe first line shows PlaneVisual3D, PyramidVisual3D and BoxVisual3D.\nIn the second line there is a SphereVisual3D. Than there are two CylinderVisual3D objects (the second has IsSmooth = false). Cylinder is actually a Cone that has TopRadius and BottomRadius the same.\nIn the last line three versions of ConeVisual3D are shown (first with TopRadius = 0; last with IsSmooth = false).\n\nTo see how the same 3D objects can be created from code see the Model3DFactorySample."/>
  <Sample Page="Objects3D/AllUIElementsSample.xaml" Title="All UIElements3D objects" Description="This sample shows all the \!3D objects\! created from classes defined in \!Ab3d.UIElements\!. The difference between those 3D objects and the objects from Ab3d.Visuals is that those objects are derived from UIElement3D and therefore have support for input, focusing, and eventing. They also defined the ToolTip property."/>
  <Sample Page="Objects3D/SphereVisual3DSample.xaml" Title="SphereVisual3D" Description=""/>
  <Sample Page="Objects3D/BoxVisual3DSample.xaml" Title="BoxVisual3D" Description=""/>
  <Sample Page="Objects3D/PlaneVisual3DSample.xaml" Title="PlaneVisual3D" Description="Note: The plane orientation is defined by two vectors: Normal and HeightDirection. The Normal is perpendicular to the plane. But because our plane in not infinite, only the normal is not enough to define the orientation of the plane (around the axis defined by the Normal vector). To define the orientation a HeightDirection vector is used. It shows in the direction in which the plane's height (also defined in the plane's Size) is looking.\nIn the default settings for this sample the normal is pointing up - this means that the plane will be horizontal. The HeightDirection is pointing into the screen (z = -1) - this means that the plane height is pointing in -z axis direction.\nThe Normal and HeightDirection vectors should be perpendicular. If they are not the plane orientation and its normals can become invalid."/>
  <Sample Page="Objects3D/CircleVisual3DSample.xaml" Title="CircleVisual3D" Description="Note: The circle orientation is similar to plane's orientation defined by two vectors. See the description with the plane sample for more info.\nBecause circle does not define width and height (only radius), the second vector is not named HeightDirection but UpVector instead."/>
  <Sample Page="Objects3D/TubeVisual3DSample.xaml" Title="TubeVisual3D" Description=""/>
  <Sample Page="Objects3D/CylinderVisual3DSample.xaml" Title="CylinderVisual3D" Description=""/>
  <Sample Page="Objects3D/TrapezoidVisual3DSample.xaml" Title="TrapezoidVisual3D" Description=""/>
  <Sample Page="Objects3D/ConeVisual3DSample.xaml" Title="ConeVisual3D" Description=""/>
  <Sample Page="Objects3D/ConeTubeVisual3DSample.xaml" Title="ConeTubeVisual3D" Description=""/>
  <Sample Page="Objects3D/ArrowVisual3DSample.xaml" Title="ArrowVisual3D" Description=""/>
  <Sample Page="Objects3D/MultiMaterialBoxVisual3DSample.xaml" Title="MultiMaterialBoxVisual3D" Description="The MultiMaterialBox is similar to the Box but instead of having a single material for all the sides, the MultiMaterialBox can define different material for each side. It also defines a FallbackMaterial property that is used when the material for the specified side is not set. The IsTwoSidedMaterial property can be used to set the material to both sides for each Model3D that define the box (Material and BackMaterial). It can be used when the user can see inside the box because FallbackMaterial and some of the sides are not defined."/>
  <Sample Page="Objects3D/MultiMaterialBoxesSample.xaml" Title="MultiMaterialBoxesSample" Description="This sample shows some of the possible uses of \!MultiMaterialBox\!. Note that setting materials to all the 3D objects in Ab3d.PowerToys is very easy as all their materials can use a special material converter that can convert color name or code (#FF00AA) or image path to a material."/>
  <Sample Page="Objects3D/SkyboxSample.xaml" Title="Skybox sample" Description=""/>
  <Sample Page="Objects3D/ContentVisual3DSample.xaml" Title="ContentVisual3D" Description="\bContentVisual3D\b class can be used to show a GeometryModel3D or a Model3DGroup that is specified to its Content property. The class is very similar to the standard WPF's ModelVisual3D. A difference is that ContentVisual3D also supports \bIsVisible\b property. This means that when rendered with Ab3d.DXEngine the processing of IsVisible property can be optimized (DirectX resources stay im memory when object is hidden and can be therefore shown very fast)."/>
  <Sample Page="Objects3D/Model3DFactorySample.xaml" Title="Model3DFactory sample" Description="This sample is showing the same result as the AllVisualsSample. But instead of using 3D visuals to create objects in XAML, all the 3D objects are \!created form code with Model3DFactory\! class."/>
  <Sample Page="Objects3D/UIElementsToolTipSample.xaml" Title="UIElements ToolTip" Description="All 3D objects that are defined in \!Ab3d.UIElements\! namespace besides support for input, focusing, and eventing (defined in base UIElement3D class) also define \!ToolTip\! property. This sample shows how to define ToolTip on 3D objects.\nNote that because 3D objects are not a regular 2D UIElements, it is not possible to set a ToolTipService's Placement to any value that would require the knowledge of the 2D size of the object - for example Right or Bottom."/>
  <Sample Page="Objects3D/MaterialTypeConverterSample.xaml" Title="MaterialTypeConverter" Description="Ab3d.PowerToys library also defines a \!MaterialTypeConverter\! that can simplify assigning the Material and BackMaterial properties on Abd3.Visual or Ab3d.UIElements object. With new MaterialTypeConverter it is possible to simply specify the name of the color to create a DiffuseMaterial with SolidColorBrush.\n\nFor example: Material=&quot;Red&quot; or Material=&quot;#FF0000&quot; or Material=&quot;myTexture.png&quot;"/>
  <Sample Page="Objects3D/ObjectInspector.xaml" Title="Object inspector" />

  <Sample Page="Objects3D/AdvancedObjects3DIntroPage.xaml" IsTitle="True" Title="Advanced 3D Objects"/>
  <Sample Page="Objects3D/HeightMapSample.xaml" Title="HeightMap" Description="This sample shows how to use HeightMapVisual3D and some if its properties. The sample also shows how to create a height map from grayscale image."/>
  <Sample Page="Objects3D/TubePathSample.xaml" Title="TubePathSample" Description=""/>
  <Sample Page="Objects3D/StreamLinesSample.xaml" Title="Streamlines" Description=""/>
  <Sample Page="Objects3D/ExtrudeCreator.xaml" Title="Extrude creator" Description="This sample demonstrates how to use Ab3d.Meshes.Mesh3DFactory to create 3D extruded objects from 2D polylines. It also shows how to use Ab3d.Utilities.Triangulator to create 3D planes from 2D polylines."/>
  <Sample Page="Objects3D/ExtrudeAlongPathSample.xaml" Title="Extrude along a path" Description=""/>
  <Sample Page="Objects3D/LatheCreator.xaml" Title="Lathe creator" />
  <Sample Page="Objects3D/BooleanOperationsSample.xaml" Title="Mesh Boolean operations" Description="Note: MeshGeometry3D objects that are generated with boolean operations do not have TextureCoordinates defined. This means that it is not possible to show texture image on those models.\n\nTo generate texture coordinates, it is possible to \buse texture coordinates generator\b from Ab3d.PowerToys library - see Utilities - TextureCoordinates generator for more info."/>
  <Sample Page="Objects3D/SliceSample.xaml" Title="Slice 3D model with a plane"  Description="Slice sample shows how to slice 3D model into two parts with a plane."/>

  <Sample Page="Lines3D/Lines3DIntroPage.xaml" IsTitle="True" Title="3D Lines"/>
  <Sample Page="Lines3D/Lines3DSample.xaml" Title="3D Lines sample" Description="The 3D Lines sample shows various 3D lines.\n\nThe sample shows that it is possible to define single lines, poly-lines, arc shapes. It is also possible to create wire grids, rectangles, crosses, axes, and 3d wire boxes.\n\nAll the lines have their Color and Thickness properties. Note that the Thickness is specified in the screen units - this mean that if line thickness is 3, the line will be always 3 pixels thick regardless how far from the camera it is defined."/>
  <Sample Page="Lines3D/MiterLimitSample.xaml" Title="MiterLimit sample" Description="This sample shows multiple 3D lines created with PolyLineVisual3D and demonstrates how different \bMiterLimit\b values affect rendering line joints. A MiterLimit defines when a mitered joint becomes a beveled square joint. For example, a value of 4 requires the mitered joint length to be 4 times the line thickness before the joint becomes beveled.\r\nNote that when you rotate the camera, the joints can change from mitered to beveled joints.\r\nMiterLimit is supported on all 3D lines that are derived from BasePolyLineVisual3D: PolyLineVisual3D, MultiPolyLineVisual3D, RectangleVisual3D and LineArcVisual3D.\r\nBy default (if not specified) the MiterLimit value is 2, except on RectangleVisual3D where it is set to 4."/>
  <Sample Page="Lines3D/WireframeTypesSample.xaml" Title="Wireframe Types" Description="This sample shows how the model in WireframeVisual3D is shows differently based on different WireframeTypes: None, Wireframe, OriginalSolidModel, WireframeWithOriginalSolidModel, SingleColorSolidModel, WireframeWithSingleColorSolidModel\nLineThickness is set to 2, LineColor to Black and SolidModelColor to Green."/>
  <Sample Page="Lines3D/WireframeSample.xaml" Title="Wireframe sample" Description="This sample shows how to use WireframeVisual3D to create a wireframe model from other 3D models.\nPlease, in code behind check the important performance tips when changing properties of WireframeVisual3D or the associated Model3D - see the comments in UpdateWireframe method."/>
  <Sample Page="Lines3D/WireframePolygonLines.xaml" Title="Wireframe polygon lines" Description=""/>
  <Sample Page="Lines3D/WireGridVisual3DSample.xaml" Title="WireGridVisual3D" Description="This sample shows how to show grid lines with WireGridVisual3D that supports showing major and minor 3D lines."/>
  <Sample Page="Lines3D/CurvesSample.xaml" Title="Curves sample" Description="This sample shows how to create a 3D curve from the control points. The sample also shows how the get one position on the curve.\r\nThe samples show the B-Spline and NURBS Curve. The NURBS Curve is similar to B-Spline curve but it also support weighted control points (control points that are more important can have higher weight).\r\n\r\nNote that it is possible to change the text that defines the control points and weight. After the change click the &quot;Update curve&quot; button to draw the changed curve."/>
  <Sample Page="Lines3D/LinesSelector.xaml" Title="3D Line selection" Description="This sample shows how to use LinesSelectorData to simplify lines selection so that a line is selected when the mouse is close to the line."/>
  <Sample Page="Lines3D/Lines3DStressTest.xaml" Title="Lines3D stress test" Description="This sample is a stress test for 3D Lines. It shows that it is possible to show really a lot of 3D lines and still have a smooth animation (frames per second). It also shows how to further \!optimize showing 3D lines\! with using \!LinesUpdater\! class.\nNote that WPF does not natively support 3D lines, so all the lines must be created with using two triangles. Also all the lines must be updated when the camera is changed.\nWith the animated camera the lines geometry is updated on each rendering (frame). Note that the by default the frame rate in WPF is limited to a value around 60 frames per second.\nThe sample also shown how it is possible to improve performance with manually call Refresh method on LinesUpdater to update the lines."/>
  <Sample Page="Lines3D/TubeLinesSample.xaml" Title="TubeLines sample" Description="TubeLines sample shows how to create 3D lines that are created from 3D tubes.\nAdvantage of using TubeLines over normal 3D lines is that the geometry for them is fixed (created at initialization) and they do not need to be updated each time the camera is changed. A disadvantage is that their thickness cannot be specified in screen space units but is specified in 3D world units."/>

  <Sample Page="Text3D/Text3DIntroPage.xaml" IsTitle="True" Title="3D Text"/>
  <Sample Page="Text3D/TextBlockVisual3DProperties.xaml" Title="TextBlockVisual3D properties" Description=""/>
  <Sample Page="Text3D/CustomTextBlockVisual3DSample.xaml" Title="Custom TextBlockVisual3D" Description="This sample shows some additional ways to customize the text and border drawn with the TextBlockVisual3D.\n\n1) The easiest way to customize the text is to use TextBlockVisual3D.Inlines property. This gives you access to Inlines on the TextBlock and allows you to show different parts of the text with different settings.\n2) Another way to customize the appearance of the TextBlockVisual3D is to derive a custom class from the TextBlockVisual3D. This gives you access to the TextBlock, Border and GeometryModel3D elements that are used in TextBlockVisual3D. In this sample the RoundedTextBlockVisual3D is created to add a CornerRadius property."/>
  <Sample Page="Text3D/Text3DSample.xaml" Title="3D text sample" Description="The sample demonstrates the usage of \!TextVisual3D\! and \!CenteredTextVisual3D\!. The difference between them is that for the TextVisual3D a position of the upper left point of the first character is specified. For the CenteredTextVisual3D the text's center positions is set. The specified positions is marked with the red cross.\n\nWith the sample it is possible to change the displayed text and various text properties.\n\nThe text is surrounded by a rectangle whose size is calculated by the MeasureText method."/>
  <Sample Page="Text3D/TextDirectionsSample.xaml" Title="TextDirections sample" Description="This sample demonstrates how various settings of \!TextDirection\! and \!UpDirection\! affect the displayed text."/>
  <Sample Page="Text3D/AdjustingTextDirectionSample.xaml" Title="Adjusting TextDirection" Description="This sample shows how to adjust TextDirection based on the camera direction to correctly show 3D text when camera is looking at the text from behind."/>
  <Sample Page="Text3D/LineWithTextSample.xaml" Title="LineWithText sample" Description="With \!LineWithText\! it is very easy to create notations in the 3D scene."/>
  <Sample Page="Text3D/SymbolCharactersSample.xaml" Title="Symbol characters sample" Description=""/>

  <Sample Page="Animations/AnimationIntroPage.xaml" IsTitle="True" Title="Animation"/>
  <Sample Page="Animations/CameraAnimation.xaml" Title="Camera animation" Description=""/>
  <Sample Page="Animations/FreeCameraAnimation.xaml" Title="FreeCamera animation" IsUpdated="True" UpdateInfo="Added AnimationType property to FreeCameraAnimationNode class to provide spherical animation of FreeCamera" Description="Note that when using FreeCameraAnimationNode then CameraPosition, TargetPosition and UpDirection are animated with moving lineary from one position or vector to another. This means that if you only animate CameraPosition, then the distance to the TargetPosition will change during animation. If you want to circle the camera around the target object and preserve the distance, then use the CameraAnimationNode."/>
  <Sample Page="Animations/AnimationSettings.xaml" Title="Animation settings" Description=""/>
  <Sample Page="Animations/ObjectAnimationSample.xaml" Title="Object animation" Description="This sample is showing how to animate an object's position, scale and rotation.\nThe sample also shows how to smooth the positions with creating a smooth curve through specified positions."/>
  <Sample Page="Animations/EasingFunctions.xaml" Title="Easing functions" Description=""/>
  <Sample Page="Animations/AnimationEasingSample.xaml" Title="Animation easing" Description="Animation easing sample shows how different animation easing functions can result in different easing effect. Each sphere in the sample is using the same position animation with 4 key frames (each key frame defines different position and is shown with black wire cross).\n\nThe \!orange\! sphere has no easing function specified. This means that linear interpolation is used to advanced from one key frame to another and this results in constant speed of movement. This is shown with equal distribution of red wire crosses.\nThe \!green\! sphere has QuadraticEaseInOut function specified on all key frames. This produces easing effect where the sphere starts slowly, then accelerates until the middle of the animation and then decelerates before coming to the next key frame. This can be seen because the red wire crosses are more dense around key frames (slower speed there).\nThe \!blue\! sphere has QuadraticEaseOut function specified on all key frames. This have no easing effect after sphere moves from the key frame, but have big easing effect when the sphere comes closer to the next key frame. This can be seen because the red wire crosses are wide apart after each key frame and more dense before the next key frame.\nThe \!yellow\! sphere do not have any easing specified on key frames but instead have QuadraticEaseInOut function specified on the whole PositionTrack (PositionTrack contains the position key frames collection). This means that easing is not applied between individual key frames but on the whole PositionTrack - from the first to the last key frame. This can be seen because red wire crosses are more dance at the start and end of the whole animation line (moving slower) and wider apart in the middle (moving faster).\n\nIt is possible to combine easing effects on key frames and PositionTracks and also use the same easing effects on rotation and other animation types."/>
  <Sample Page="Animations/CustomAnimationSample.xaml" Title="Custom animation" Description="This sample shows how to create a custom class that is derived from AnimationNodeBase - in this case a simple SolidColorBrushAnimationNode is used to animate color of the material."/>

  <Sample Page="EventManager3D/EventManagerIntroPage.xaml" IsTitle="True" Title="EventManager3D"/>
  <Sample Page="EventManager3D/EventManagerClickSample.xaml" Title="Mouse enter, leave and click"/>
  <Sample Page="EventManager3D/EventManagerDragSample.xaml" Title="Mouse Drag Sample" Description="This sample demonstrates how simple is to create a 3D object that is moved around the scene by dragging it with the mouse. It also shows how to exclude some 3d objects (semi transparent yellow plane) from hit testing."/>
  <Sample Page="EventManager3D/EventManagerSample.xaml" Title="Events data" Description="This simple demonstrates the events that are fired with the EventManager3D.\nAll three parts of the Wind Generator are used as TargetObject in the EventSource3D. All the objects are subscribed to all the events. The Landscape model is also used as TargetObject in the EventSource3D. But it is not subscribed to any of the events. Instead it is used as a DragSurface for other objects."/>
  <Sample Page="EventManager3D/TouchManipulationsSample.xaml" Title="Touch manipulations" Description="This sample shows how to use EventManager3D to create touch based object scaling and rotating. See the code behind for more information."/>
  <Sample Page="EventManager3D/MouseSelectionAndRotation.xaml" Title="Mouse selection and rotation" Description="This samples shows how to use left mouse button for object selection and also for mouse rotation."/>
  <Sample Page="EventManager3D/StandardWpfHitTestingDemo.xaml" Title="Standard WPF hit testing" Description="The samples in this project demonstrate the usage of Ab3d.PowerToys features. But because 3D hit testing is used in almost any application, this sample shows how to use the standard WPF 3D hit testing. This type of hit testing is very useful in many situations where there are many possible hit objects and when the objects in the scene are dynamically added and removed. This type of hit testing is also internally used by the EventManger3D. EventManger3D is more useful for simple 3D scenes where the number of objects is low and does not change a lot."/>
  
  <Sample Page="Utilities/UtilitiesIntroPage.xaml" IsTitle="True" Title="Utilities"/>
  <Sample Page="Utilities/PlanarShadows.xaml" Title="Planar Shadows" Description=""/>
  <Sample Page="Utilities/LightingRigSample.xaml" Title="Standard lighting sample" Description="This sample demonstrates how to add \!standard lighting\! to the scene with the \!LightingRigVisual3D\!.\n\nLightingRigVisual3D is a ModelVisual3D that contains 3 DirectionalLight and one AmbientLight objects that define the standard lighting with key, fill and back light. The /!key light/! is the brightest, and provides the main illumination and shadows. This will typically be positioned to match a real light source such as an overhead lamp, a window, or the sun for an outdoor scene. The /!fill light/! is dimmer, and usually angled at 90 degrees to the key. This is used to soften the shadows, adding shading and definition to areas that would otherwise be solid black. The /!back light/! is positioned behind the character, facing toward the camera. This illuminates only the silhouette edges, helping the character stand out against the background.\n\nSuch lighting composition is usually used in photo studios and movies and provides a natural looking lighting."/>
  <Sample Page="Utilities/ModelMoverOverlaySample.xaml" Title="ModelMover overlay" Description="ModelMover Overlay sample shows how to use ModelMoverVisual3D element to create 3D arrows that can be used to move selected objects around.\n\nThe ModelMoverVisual3D is shown in an overlay Viewport3D that is shown on top of main Viewport3D. This way the ModelMoverVisual3D is not occluded by other objects."/>
  <Sample Page="Utilities/ModelMoverInsideObjectSample.xaml" Title="ModelMover inside object" Description="ModelMover inside object sample shows how to show ModelMoverVisual3D inside selected object. This is done with changing the material of selected object to semi-transparent. Also the selected model is set to be not hit-test-visible any more so the user can click on the ModelMoverVisual3D inside the selected model."/>
  <Sample Page="Utilities/ModelRotatorSample.xaml" Title="ModelRotator" Description="This sample shows how to use ModelRotatorVisual3D to rotate selected object."/>
  <Sample Page="Utilities/ModelScalarSample.xaml" Title="ModelScalar" Description=""/>
  <Sample Page="Utilities/ModelMoverAndRotatorSample.xaml" Title="ModelMover and ModelRotator" Description=""/>
  <Sample Page="Utilities/TransparencyProblem.xaml" Title="Transparency problem" Description="This sample shows the \!problem with transparent objects in WPF 3D\!.\n\nIn WPF the objects can be seen through transparent objects only if they are defined before the transparent objects. This sample shows how the red boxes are not visible through GlassPlane because they are defined after the GlassPlane. To render the objects correctly, the GlassPlane must be moved after other objects.\n\nTo solve this problem we can manually move the GlassPlane or use the Ab3d.Utilities.\!TransparencySorter\!.\n\n\n\!To understand why the transparency problem occurs\!, read the extensive commend in the code behind in TransparencyProblem.xaml.cs file."/>
  <Sample Page="Utilities/Model3DTransparencySortingSample.xaml" Title="Model3D transparency sorting" Description="This sample shows how to correctly show a scene with many transparent objects. To show objects correctly, the transparent objects need to be sorted by the their distance from the camera's position. The sorting is done in such a way that the objects that are father away from the camera are drawn before objects that are closer to the camera.\nThe sample show how to use the \!TransparencySorter\!. The two TextBoxes on the right show the current position of objects and the events that show when the positions are changed.\nNote: In case of slow performance turn off logging with unchecking &quot;Is logging enabled&quot; as it takes most of the time."/>
  <Sample Page="Utilities/Visual3DTransparencySortingSample.xaml" Title="Visual3D transparency sorting" Description="This sample is almost the same as the previous sample. The only difference is that this sample is using Visual3D objects instead of Model3D objects."/>
  <Sample Page="Utilities/SceneWithGlassesSample.xaml" Title="Scene with glasses" Description="This sample shows the transparency problem and its solution in a scene with coffee cup and many transparent glasses.\n\nBy \!disabling\! transparency sorting only the cup plate is visible through the glasses.\nWith using only \!simple\! transparency sorting, the non-transparent objects are correctly visible through glasses, but some glasses are not visible through some glasses.\nWith sorting \!by camera distance\! all the objects are correctly visible through glasses."/>
  <Sample Page="Utilities/ShadingHelperSample.xaml" Title="ShadingHelper sample" Description="This sample demonstrates the use of Ab3d.Utilities.\!ShadingHelper\! class. With SmoothModel3D method it is possible to smooth the 3D model. The FlattenModel3D model makes the model flat with sharp edges.\nCheck the Show Normals and triangles checkboxes and observe the Positions count to see what makes the edges sharp or smooth.\nThe original Cylinder models is chosen because it contains some smooth and some sharp edges."/>
  <Sample Page="Utilities/ModelOptimizerTest.xaml" Title="ModelOptimizer test" Description="This sample shows how to use Ab3d.Utilities.ModelOptimizer and how it can greatly improve rendering performance."/>
  <Sample Page="Utilities/RenderToBitmapSample.xaml" Title="Render to Bitmap" Description=""/>
  <Sample Page="Utilities/MeshInspectorOverlaySample.xaml" Title="MeshInspectorOverlay" Description="\!MeshInspectorOverlay\! is a Canvas that can be added on top of a Viewport3D object and can show positions and triangles indexes of the specified MeshGeometry3D object. This is very useful to better understand how the MeshGeometry3D is created.\n\nTo use MeshInspectorOverlay set its Mesh and Camera properties. Then you can also adjust what and how the mesh data are shown."/>
  <Sample Page="Utilities/ModelDecoratorSample.xaml" Title="ModelDecorator" Description=""/>
  <Sample Page="Utilities/PositionAndScaleModel3DSample.xaml" Title="Position and scale helper" Description=""/>
  <Sample Page="Utilities/PerspectiveTransformationSample.xaml" Title="Perspective transformation" Description="This sample shows how the 3D positions are converted into 2D positions on screen.\nThe sample is using \bModelIterator.IterateGeometryModel3DObjects\b to iterate though all GeometryModel3D objects.\nWhen showing filled 3D objects, the invalid order of rendering Polygons produce strange looking objects - the Polygons in the back of the object can be rendered over the Polygons in the front. On graphic card this is solved with per pixel depth comparison."/>
  <Sample Page="Utilities/TextureCoordinatesGeneratorSample.xaml" Title="TextureCoordinates generator" Description="This sample shows how to apply custom texture coordinates to a 3D model. Texture coordinates specify how the texture image is shown on the 3D model.\n\nThe standard 3D objects that are created with Ab3d.PowerToys library already have texture coordinates defined. But if you have some custom made 3D objects (like objects created with boolean operations) or would like a different way of showing texture image, it is possible to use texture generation to generate texture coordinates."/>
  <Sample Page="Utilities/ExtensionMethods.xaml" Title="Extension methods" Description=""/>
  <Sample Page="Utilities/OtherUtilitiesInfo.xaml" Title="Other utilities" Description=""/>

  <Sample IsSeparator="True" />
  <Sample Page="Other/DXEngineSamples.xaml" IsTitle="True" Title="DirectX 11 rendering" Description=""/>

  <Sample IsSeparator="True" />
  <Sample Page="Other/WinFormsInfo.xaml" IsTitle="True" Title="WinForms sample" Description=""/>

  <Sample IsSeparator="True" />
  <Sample Page="Other/SupportPage.xaml" IsTitle="True" Title="Support" Description=""/>
</Samples>